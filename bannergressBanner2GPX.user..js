// ==UserScript==
// @name         bannergressBanner2GPX
// @namespace    your name space
// @version      0.1
// @description  desc
// @author       You
// @run-at       document-start
// @match        https://bannergress.com/banner/*
// @grant        unsafeWindow
// @grant        GM_log
// @grant        GM_xmlhttpRequest
// ==/UserScript==

'use strict';
// 添加下载按钮到页面
const downloadBtn = document.createElement('button');
downloadBtn.innerText = 'Download GPX';
document.body.insertBefore(downloadBtn, document.body.firstChild);

// 设置按钮样式
downloadBtn.style.position = 'fixed'; // 固定位置
downloadBtn.style.top = '5%'; // 页面顶部向下5%
downloadBtn.style.left = '0'; // 紧贴页面左侧
downloadBtn.style.zIndex = '1000'; // 确保按钮显示在页面内容之上
downloadBtn.style.backgroundColor = '#4CAF50'; // 绿色背景
downloadBtn.style.color = 'white'; // 白色文字
downloadBtn.style.padding = '10px 20px'; // 内边距
downloadBtn.style.border = 'none'; // 无边框
downloadBtn.style.borderRadius = '0 5px 5px 0'; // 右侧圆角
downloadBtn.style.cursor = 'pointer'; // 鼠标悬停时显示指针
downloadBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)'; // 添加阴影效果

var gpxData;
downloadBtn.addEventListener('click', function () {
  const blob = new Blob([gpxData], { type: 'application/gpx+xml' });
  const url = URL.createObjectURL(blob);

  // 创建一个动态文件名，包含“MissionTrackpoint”和当前时间戳
  //const filename = `MissionTrackpoint${getFormattedDateTime()}.gpx`;
  const filename = `IngressMission_${mResult.title}.gpx`;
  const a = document.createElement('a');
  a.href = url;
  a.download = filename; // 使用动态文件名
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
});

function getFormattedDateTime () {
  const now = new Date();
  const year = now.getFullYear();
  const month = (now.getMonth() + 1).toString().padStart(2, '0'); // 月份是从0开始的
  const day = now.getDate().toString().padStart(2, '0');
  const hours = now.getHours().toString().padStart(2, '0');
  const minutes = now.getMinutes().toString().padStart(2, '0');
  const seconds = now.getSeconds().toString().padStart(2, '0');
  return `${year}${month}${day}${hours}${minutes}${seconds}`;
}
var mResult;
let oldFetch = fetch;
function hookFetch (...args) {
  return new Promise((resolve, reject) => {
    oldFetch.call(this, ...args).then((response) => {
      if (
        args.length !== 0 &&
        args[0].indexOf &&
        args[0].indexOf("https://api.bannergress.com/bnrs/") !== -1
      ) {
        const oldJson = response.json;
        response.json = function () {
          return new Promise((resolve, reject) => {
            oldJson.apply(this, arguments).then((result) => {
              var missionData = result.missions;
              mResult = result;
              generateGPX(missionData);
              resolve(result);
            });
          });
        };
      }
      resolve(response);
    });
  });
}

function generateGPX (missionData) {
  var stepsData = [];
  const creator = new GPXCreator("mContext", "Ingress Mission Trackpoint GPX file generated with GPXCreator");
  creator.addTrack("IngressMissionTrackpoint");
  for (let i = 0; i < Object.keys(missionData).length; i++) {
    stepsData = missionData[i].steps;
    stepsData.forEach(element => {
     const poi = element.poi;
      if (poi && poi.latitude !== undefined && poi.longitude !== undefined) {
        creator.addTrackpoint(0, poi.latitude, poi.longitude, generateRandomDecimal(400, 5));
      }
    });
  }
  gpxData = creator.generate();
  //console.log(gpxData);
}

class GPXCreator {
  constructor(name = "DefaultGPX", desc = "Generated by GPXCreator") {
    this.xmlDeclaration = '<?xml version="1.0" encoding="UTF-8"?>\n';
    this.gpxOpenTag = `<gpx version="1.1" creator="GPXCreator" xmlns="http://www.topografix.com/GPX/1/1">\n`;
    this.metadata = `  <metadata>\n    <name>${name}</name>\n    <desc>${desc}</desc>\n  </metadata>\n`;
    this.gpxCloseTag = `</gpx>`;
    this.tracks = [];
  }

  addTrack (name, desc = "") {
    const track = { name, desc, trksegs: [] };
    this.tracks.push(track);
    return this.tracks.length - 1; // Return index of newly added track
  }

  addTrackpoint (trackIndex, lat, lon, ele = null, time = null) {
    const trkpt = `        <trkpt lat="${lat}" lon="${lon}">${ele ? `\n          <ele>${ele}</ele>` : ''}${time ? `\n          <time>${time}</time>` : ''}\n        </trkpt>`;
    if (!this.tracks[trackIndex].trksegs.length) {
      this.tracks[trackIndex].trksegs.push([]);
    }
    this.tracks[trackIndex].trksegs[0].push(trkpt); // Add to the first segment for simplicity
  }

  generate () {
    const tracksString = this.tracks.map(track => {
      const trksegsString = track.trksegs.map(trkseg => {
        return `      <trkseg>\n${trkseg.join('\n')}\n      </trkseg>`;
      }).join('\n');
      return `  <trk>\n    <name>${track.name}</name>\n    <desc>${track.desc}</desc>\n${trksegsString}\n  </trk>`;
    }).join('\n');

    return `${this.xmlDeclaration}${this.gpxOpenTag}${this.metadata}${tracksString}\n${this.gpxCloseTag}`;
  }
}


//生成随机数
function generateRandomDecimal (average, fluctuation) {
  // 生成一个在 -fluctuation 到 +fluctuation 范围内的随机小数
  const randomFluctuation = Math.random() * (2 * fluctuation) - fluctuation;
  // 将随机浮动值加到平均数上
  return average + randomFluctuation;
}



window.unsafeWindow.fetch = hookFetch